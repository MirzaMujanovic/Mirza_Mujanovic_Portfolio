[
["text-analysis-of-novels.html", "3 Text Analysis of Novels 3.1 Data 3.2 Text cleaning 3.3 Awakening: 3.4 Aspern 3.5 Commonality cloud and Comparison cloud 3.6 Sentiment timeline 3.7 Topic Modelling 3.8 Main points of interpretation:", " 3 Text Analysis of Novels 3.1 Data Downloading Novels ‘The Awakening’ and ‘The Aspern Papers’ awakening &lt;- scan(&quot;http://www.gutenberg.org/files/160/160-0.txt&quot;, what=&quot;character&quot;, blank.lines.skip = TRUE, sep=&quot;\\n&quot;) aspern &lt;- scan(&quot;http://www.gutenberg.org/files/211/211-0.txt&quot;, what=&quot;character&quot;, blank.lines.skip = TRUE, sep=&quot;\\n&quot;) awakening&lt;- iconv(awakening, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) aspern&lt;- iconv(aspern, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) 3.2 Text cleaning awakening.begin &lt;- which(awakening==&quot;THE AWAKENING&quot;)[2] awakening.end &lt;- which(awakening==&quot;*****&quot;) - 1 awakening.v&lt;- awakening[awakening.begin:awakening.end] aspern.begin &lt;- which(aspern==&quot;Macmillan and Co., 1888.&quot;)+1 aspern.end &lt;- which(aspern==&quot;End of the Project Gutenberg EBook of The Aspern Papers, by Henry James&quot;) - 1 aspern.v &lt;- aspern[aspern.begin:aspern.end] 3.3 Awakening: Cutting in chapters and corpus creation awakening.v &lt;- gsub(&quot;^I*(X|V)*I*$&quot;, &quot;@@@&quot;, awakening.v) awakening.string &lt;- paste(awakening.v, collapse = &quot; &quot;) awakening.chapters &lt;- strsplit(awakening.string, &quot;@@@ &quot;) awakening.df &lt;- as.data.frame(awakening.chapters, stringsAsFactors = FALSE) awakening.df &lt;-awakening.df[2:38,1] awakening.df &lt;- as.data.frame(awakening.df) colnames(awakening.df) &lt;- &quot;chapters&quot; awakening.docs &lt;- Corpus(VectorSource(awakening.df$chapters)) Text preprocessing toSpace &lt;- content_transformer(function (x , pattern ) gsub(pattern, &quot; &quot;, x)) awakening.docs &lt;- tm_map(awakening.docs, toSpace, &quot;/&quot;) awakening.docs &lt;- tm_map(awakening.docs, toSpace, &quot;@&quot;) awakening.docs &lt;- tm_map(awakening.docs, toSpace, &quot;\\\\|&quot;) awakening.docs &lt;- tm_map(awakening.docs, content_transformer(tolower)) awakening.docs &lt;- tm_map(awakening.docs, removeNumbers) awakening.docs &lt;- tm_map(awakening.docs, removeWords, stopwords(&quot;english&quot;)) awakening.docs &lt;- tm_map(awakening.docs, removePunctuation) awakening.docs &lt;- tm_map(awakening.docs, stripWhitespace) WordCloud preparation and wordcloud graph awakening.dtm &lt;- DocumentTermMatrix(awakening.docs, control=list(weighting=weightTf)) awakening.m &lt;- as.matrix(t(awakening.dtm)) awakening_v &lt;- sort(rowSums(awakening.m),decreasing=TRUE) awakening.d &lt;- data.frame(word = names(awakening_v),freq=awakening_v) head(awakening.d, 10) ## word freq ## edna edna 287 ## one one 194 ## upon upon 190 ## pontellier pontellier 180 ## little little 148 ## robert robert 148 ## mrs mrs 145 ## said said 143 ## madame madame 126 ## like like 124 set.seed(1234) wordcloud(words = awakening.d$word, freq = awakening.d$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, &quot;Dark2&quot;)) 3.4 Aspern Cutting in chapters and corpus creation aspern.v &lt;- gsub(&quot;^I*(X|V)*I*$&quot;, &quot;@@@&quot;, aspern.v) aspern.string &lt;- paste(aspern.v, collapse = &quot; &quot;) aspern.chapters &lt;- strsplit(aspern.string, &quot;@@@ &quot;) aspern.df &lt;- as.data.frame(aspern.chapters, stringsAsFactors = FALSE) aspern.df &lt;-aspern.df[2:38,1] aspern.df &lt;- as.data.frame(aspern.df) colnames(aspern.df) &lt;- &quot;chapters&quot; aspern.docs &lt;- Corpus(VectorSource(aspern.df$chapters)) Text preprocessing toSpace &lt;- content_transformer(function (x , pattern ) gsub(pattern, &quot; &quot;, x)) aspern.docs &lt;- tm_map(aspern.docs, toSpace, &quot;/&quot;) aspern.docs &lt;- tm_map(aspern.docs, toSpace, &quot;@&quot;) aspern.docs &lt;- tm_map(aspern.docs, toSpace, &quot;\\\\|&quot;) aspern.docs &lt;- tm_map(aspern.docs, content_transformer(tolower)) aspern.docs &lt;- tm_map(aspern.docs, removeNumbers) aspern.docs &lt;- tm_map(aspern.docs, removeWords, stopwords(&quot;english&quot;)) aspern.docs &lt;- tm_map(aspern.docs, removePunctuation) aspern.docs &lt;- tm_map(aspern.docs, stripWhitespace) WordCloud preparation and wordcloud graph aspern.dtm &lt;- DocumentTermMatrix(aspern.docs, control=list(weighting=weightTf)) aspern.m &lt;- as.matrix(t(aspern.dtm)) aspern_v &lt;- sort(rowSums(aspern.m),decreasing=TRUE) aspern.d &lt;- data.frame(word = names(aspern_v),freq=aspern_v) head(aspern.d, 10) ## word freq ## miss miss 264 ## tita tita 173 ## said said 149 ## know know 111 ## old old 105 ## dont dont 96 ## made made 85 ## little little 84 ## see see 82 ## one one 80 set.seed(1234) wordcloud(words = aspern.d$word, freq = aspern.d$freq, min.freq = 1, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, &quot;Dark2&quot;)) 3.5 Commonality cloud and Comparison cloud Creation of a corpus out of the both texts cc.docs &lt;- Corpus(VectorSource(c(awakening.string,aspern.string))) Text preprocessing toSpace &lt;- content_transformer(function (x , pattern ) gsub(pattern, &quot; &quot;, x)) cc.docs &lt;- tm_map(cc.docs, toSpace, &quot;/&quot;) cc.docs &lt;- tm_map(cc.docs, toSpace, &quot;@&quot;) cc.docs &lt;- tm_map(cc.docs, toSpace, &quot;\\\\|&quot;) cc.docs &lt;- tm_map(cc.docs, content_transformer(tolower)) cc.docs &lt;- tm_map(cc.docs, removeNumbers) cc.docs &lt;- tm_map(cc.docs, removeWords, stopwords(&quot;english&quot;)) cc.docs &lt;- tm_map(cc.docs, removePunctuation) cc.docs &lt;- tm_map(cc.docs, stripWhitespace) 3.Comparison and Commonality cloud cc.dtm &lt;- DocumentTermMatrix(cc.docs) cc.m &lt;- as.matrix(t(cc.dtm)) colnames(cc.m)&lt;- c(&quot;Awakening&quot;,&quot;Aspern&quot;) comparison.cloud(cc.m,max.words = 100,min.frrandom.order=FALSE) commonality.cloud(cc.m,max.words = 100,colors = &quot;steelblue1&quot;,min.frrandom.order=FALSE) 3.6 Sentiment timeline 1.Awakening sent.awakening &lt;- readLines(&quot;http://www.gutenberg.org/files/160/160-0.txt&quot;) sent.awakening &lt;-iconv(sent.awakening, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) awakening.corpus &lt;- VCorpus(VectorSource(sent.awakening)) awakening.corpus &lt;- tm_map(awakening.corpus, content_transformer(tolower)) awakening.corpus &lt;- tm_map(awakening.corpus, removeNumbers) awakening.corpus &lt;- tm_map(awakening.corpus, removeWords, stopwords(&quot;english&quot;)) awakening.corpus &lt;- tm_map(awakening.corpus, removePunctuation) awakening.corpus &lt;- tm_map(awakening.corpus, stripWhitespace) awakening.dtm &lt;- DocumentTermMatrix(awakening.corpus) awakening.tidy &lt;- tidy(awakening.dtm) awakening.tidy$count &lt;-as.numeric(awakening.tidy$count) colnames(awakening.tidy)[2]&lt;- &#39;word&#39; awakening.tidy$document &lt;- as.numeric(awakening.tidy$document) nrc.joy &lt;- subset(nrc, nrc$sentiment==&quot;joy&quot;) joy.words &lt;- inner_join(awakening.tidy, nrc.joy) joy.words &lt;- count(joy.words, word) bing &lt;- get_sentiments(&quot;bing&quot;) awakening.sentiment &lt;- inner_join(awakening.tidy, bing) awakening.sentiment &lt;- count(awakening.sentiment, sentiment, index=document) awakening.sentiment &lt;- spread(awakening.sentiment, sentiment, n, fill=0) awakening.sentiment$polarity &lt;- awakening.sentiment$positive - awakening.sentiment$negative awakening.sentiment$pos &lt;- ifelse(awakening.sentiment$polarity &gt;=0, &quot;pos&quot;, &quot;neg&quot;) ggplot(awakening.sentiment, aes(x=index, y=polarity, fill=pos))+geom_bar(stat=&quot;identity&quot;, position=&quot;identity&quot;, width=1) awakening.smooth &lt;- ggplot(awakening.sentiment, aes(index, polarity)) (p2&lt;-awakening.smooth + stat_smooth()) 2.Aspern sent.aspern &lt;- readLines(&quot;http://www.gutenberg.org/files/211/211-0.txt&quot;) aspern.corpus &lt;- VCorpus(VectorSource(sent.aspern)) aspern.corpus &lt;- tm_map(aspern.corpus, content_transformer(tolower)) aspern.corpus &lt;- tm_map(aspern.corpus, removeNumbers) aspern.corpus &lt;- tm_map(aspern.corpus, removeWords, stopwords(&quot;english&quot;)) aspern.corpus &lt;- tm_map(aspern.corpus, removePunctuation) aspern.corpus &lt;- tm_map(aspern.corpus, stripWhitespace) sent.aspern &lt;-iconv(sent.aspern, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) aspern.dtm &lt;- DocumentTermMatrix(aspern.corpus) aspern.tidy &lt;- tidy(aspern.dtm) aspern.tidy$count &lt;-as.numeric(aspern.tidy$count) colnames(aspern.tidy)[2]&lt;- &#39;word&#39; aspern.tidy$document &lt;- as.numeric(aspern.tidy$document) nrc.joy &lt;- subset(nrc, nrc$sentiment==&quot;joy&quot;) joy.words &lt;- inner_join(aspern.tidy, nrc.joy) joy.words &lt;- count(joy.words, word) #bing &lt;- subset(sentiments, sentiments$lexicon==&#39;bing&#39;)[,-4] aspern.sentiment &lt;- inner_join(aspern.tidy, bing) aspern.sentiment &lt;- count(aspern.sentiment, sentiment, index=document) aspern.sentiment &lt;- spread(aspern.sentiment, sentiment, n, fill=0) aspern.sentiment$polarity &lt;- aspern.sentiment$positive - aspern.sentiment$negative aspern.sentiment$pos &lt;- ifelse(aspern.sentiment$polarity &gt;=0, &quot;pos&quot;, &quot;neg&quot;) ggplot(aspern.sentiment, aes(x=index, y=polarity, fill=pos))+geom_bar(stat=&quot;identity&quot;, position=&quot;identity&quot;, width=1) aspern.smooth &lt;- ggplot(aspern.sentiment, aes(index, polarity)) (p3&lt;-aspern.smooth + stat_smooth()) Merging Aspern and Awakening g2 &lt;- ggplotGrob(p2) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; g3 &lt;- ggplotGrob(p3) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; g &lt;- rbind(g2, g3, size = &quot;first&quot;) g$widths &lt;- unit.pmax(g2$widths, g3$widths) grid.newpage() grid.draw(g) 3.7 Topic Modelling Pick up 5 topics and try to make sense of the topics giving a label to them. 1.Awakening top.mod.awakening.dtm &lt;- DocumentTermMatrix(awakening.corpus, control = list(weighting=weightTf)) burnin = 1000 iter = 1000 keep = 50 set.seed(510) top.mod.awakening.n &lt;- nrow(top.mod.awakening.dtm) top.mod.awakening.dtm &lt;- top.mod.awakening.dtm[row_sums(top.mod.awakening.dtm &gt; 0) &gt; 1,] top.mod.awakening.lda_basic.model&lt;- LDA(top.mod.awakening.dtm, k = 5L, method = &quot;Gibbs&quot;, control = list(burnin = burnin, iter = iter, keep = keep, alpha = 1) ) top.mod.awakening.lda.topics &lt;- as.matrix(topics(top.mod.awakening.lda_basic.model)) #top.mod.awakening.lda.topics top.mod.awakening.lda.terms &lt;- as.matrix(terms(top.mod.awakening.lda_basic.model, 10)) top.mod.awakening.lda.terms&lt;- iconv(top.mod.awakening.lda.terms, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) #top.mod.awakening.lda.terms awakening.top10termsPerTopic &lt;- terms(top.mod.awakening.lda_basic.model, 10) awakening.top10termsPerTopic &lt;- iconv(top.mod.awakening.lda.terms, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) #awakening.top10termsPerTopic colnames(awakening.top10termsPerTopic)&lt;-c(&quot;Edna in her house/room&quot;,&quot; Work, life and love - Leaving the papers after he/she died&quot;,&quot;Madame Edna - Mademoiselle Ratignolle - Robert&quot;,&quot;Emotions - Description of a face &quot;,&quot;Mrs.Pontellier - Edna - Robert&quot;) awakening.top10termsPerTopic ## Edna in her house/room ## [1,] &quot;one&quot; ## [2,] &quot;like&quot; ## [3,] &quot;never&quot; ## [4,] &quot;thought&quot; ## [5,] &quot;day&quot; ## [6,] &quot;might&quot; ## [7,] &quot;seemed&quot; ## [8,] &quot;children&quot; ## [9,] &quot;two&quot; ## [10,] &quot;felt&quot; ## Work, life and love - Leaving the papers after he/she died ## [1,] &quot;project&quot; ## [2,] &quot;work&quot; ## [3,] &quot;must&quot; ## [4,] &quot;gutenbergtm&quot; ## [5,] &quot;without&quot; ## [6,] &quot;new&quot; ## [7,] &quot;found&quot; ## [8,] &quot;many&quot; ## [9,] &quot;feeling&quot; ## [10,] &quot;full&quot; ## Madame Edna - Mademoiselle Ratignolle - Robert ## [1,] &quot;upon&quot; ## [2,] &quot;eyes&quot; ## [3,] &quot;face&quot; ## [4,] &quot;hand&quot; ## [5,] &quot;looked&quot; ## [6,] &quot;sat&quot; ## [7,] &quot;white&quot; ## [8,] &quot;night&quot; ## [9,] &quot;table&quot; ## [10,] &quot;took&quot; ## Emotions - Description of a face Mrs.Pontellier - Edna - Robert ## [1,] &quot;little&quot; &quot;pontellier&quot; ## [2,] &quot;madame&quot; &quot;mrs&quot; ## [3,] &quot;went&quot; &quot;said&quot; ## [4,] &quot;away&quot; &quot;edna&quot; ## [5,] &quot;old&quot; &quot;will&quot; ## [6,] &quot;edna&quot; &quot;know&quot; ## [7,] &quot;back&quot; &quot;time&quot; ## [8,] &quot;house&quot; &quot;come&quot; ## [9,] &quot;ratignolle&quot; &quot;good&quot; ## [10,] &quot;robert&quot; &quot;mademoiselle&quot; awakening.topicNames &lt;- apply(awakening.top10termsPerTopic, 2, paste, collapse=&quot; &quot;) #awakening.topicNames Aspern top.mod.aspern.dtm &lt;- DocumentTermMatrix(aspern.corpus, control = list(weighting=weightTf)) burnin = 1000 iter = 1000 keep = 50 set.seed(510) top.mod.aspern.n &lt;- nrow(top.mod.aspern.dtm) top.mod.aspern.dtm &lt;- top.mod.aspern.dtm[row_sums(top.mod.aspern.dtm &gt; 0) &gt; 1,] top.mod.aspern.lda_basic.model&lt;- LDA(top.mod.aspern.dtm, k = 5L, method = &quot;Gibbs&quot;, control = list(burnin = burnin, iter = iter, keep = keep, alpha = 1) ) top.mod.aspern.lda.topics &lt;- as.matrix(topics(top.mod.aspern.lda_basic.model)) #top.mod.aspern.lda.topics top.mod.aspern.lda.terms &lt;- as.matrix(terms(top.mod.aspern.lda_basic.model, 10)) top.mod.aspern.lda.terms&lt;- iconv(top.mod.aspern.lda.terms, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) #top.mod.aspern.lda.terms aspern.top10termsPerTopic &lt;- terms(top.mod.aspern.lda_basic.model, 10) aspern.top10termsPerTopic &lt;- iconv(top.mod.aspern.lda.terms, &#39;utf-8&#39;, &#39;ascii&#39;, sub=&#39;&#39;) #aspern.top10termsPerTopic colnames(aspern.top10termsPerTopic)&lt;-c(&quot;Home - Seeing somebody - description of eyes - leaving&quot;,&quot;Jeffrey&quot;,&quot;Tita&quot;,&quot;Aunt&quot;,&quot;Time - Woman - Venice&quot;) aspern.top10termsPerTopic ## Home - Seeing somebody - description of eyes - leaving Jeffrey ## [1,] &quot;went&quot; &quot;project&quot; ## [2,] &quot;came&quot; &quot;gutenbergtm&quot; ## [3,] &quot;house&quot; &quot;work&quot; ## [4,] &quot;back&quot; &quot;papers&quot; ## [5,] &quot;face&quot; &quot;may&quot; ## [6,] &quot;looked&quot; &quot;almost&quot; ## [7,] &quot;took&quot; &quot;works&quot; ## [8,] &quot;away&quot; &quot;electronic&quot; ## [9,] &quot;look&quot; &quot;jeffrey&quot; ## [10,] &quot;put&quot; &quot;aspern&quot; ## Tita Aunt Time - Woman - Venice ## [1,] &quot;&quot; &quot;might&quot; &quot;old&quot; ## [2,] &quot;miss&quot; &quot;come&quot; &quot;one&quot; ## [3,] &quot;&quot; &quot;little&quot; &quot;made&quot; ## [4,] &quot;tita&quot; &quot;way&quot; &quot;never&quot; ## [5,] &quot;said&quot; &quot;aunt&quot; &quot;time&quot; ## [6,] &quot;know&quot; &quot;even&quot; &quot;long&quot; ## [7,] &quot;dont&quot; &quot;take&quot; &quot;great&quot; ## [8,] &quot;think&quot; &quot;make&quot; &quot;still&quot; ## [9,] &quot;oh&quot; &quot;idea&quot; &quot;woman&quot; ## [10,] &quot;bordereau&quot; &quot;told&quot; &quot;upon&quot; #aspern.topicNames &lt;- apply(aspern.top10termsPerTopic, 2, paste, collapse=&quot; &quot;) #aspern.topicNames 3.8 Main points of interpretation: The most common words are names of characters such as Edna, Tita and Mrs.Pontellier. According to the sentiment analysis, Awakening novel is slightly from the beginning to the end. On the other hand, Aspern has a slight drop in the negative sentiment, but the end is positive. Awakening is as twice as longer text than Aspern. Due to lemmatization could not address the time of speaking (wheater it is told in past or future) Words “said”,little“,”think“,”house“,”good“,”like“,”one“,”come“,”back“,”thought\" are the most common. "]
]
