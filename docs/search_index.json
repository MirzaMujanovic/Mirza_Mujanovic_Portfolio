[["recommendation-system-for-beauty-products.html", "5 Recommendation system for beauty products 5.1 Data collection 5.2 Data preparation and preprocessing 5.3 Exploratory data analysis 5.4 Building a model 5.5 Interpretation and managerial implications 5.6 Bonus analysis: Text Mining 5.7 Future work 5.8 Limitations", " 5 Recommendation system for beauty products Figure 5.1: Foto von Andrea Piacquadio von Pexels Based on some studies it has been proven that personalized product recommendations drive 24% of the orders and 26% of the revenue. This explains the influence recommendation has on volume of orders and generally on sales figures. What is more, it has been proven that product recommendations lead to reoccurring visits and that purchases on recommendation mark higher average-order value. Consequently, we decided to use method called user-based collaborative filtering to build our recommendation system (Reference). First, we proceed with data preparation and pre-processing, then we build our recommender system, and finally draw business implications. 5.1 Data collection As we earlier mentioned, we use data on Amazon customer reviews of beauty products. The data used in this project can be accessed in this link. It contains the following features: Variable Description Product price How much a product costs. Product ID ASIN number of a product on Amazon. Product title Name of a product. Review helpfulness Fraction of users who found the review helpful. Profile name Name of the profile on Amazon. Review score Rating of the product. Review summary Concise summary of the review text. Review text Review text. Review time Review time. Review userId Review userId Note: Information collected from http://snap.stanford.edu/data/web-Amazon-links.html 5.2 Data preparation and preprocessing 5.2.1 Packages #Packages library(R.utils) library(dplyr) library(tidyr) library(janitor) library(recommenderlab) library(tm) library(NLP) library(qdap) library(readr) library(wordcloud) 5.2.2 Data collection After downloading data locally we load in data by usingreadLines() function: # Loading in data my_data &lt;- readRDS(&quot;data/amazon_beauty_full.RDS&quot;) Let us first have a look at the dimension of our data. Our data set is currently in a form of a single vector with 2772616 elements. Obviously, this is not the optimal form of the data we would like to work with. That is why we need to work around this data set to make it more convenient for further analysis. What we can do first is to remove all fields with no characters: my_data &lt;- my_data[sapply(my_data, nchar) &gt; 0] Then we can convert it to data frame: my_data &lt;- as.data.frame(my_data) colnames(my_data) &lt;- &quot;product&quot; One of the critical steps is separating the column to multiple columns: # Separate one column to two (&quot;:&quot; separator) my_data &lt;- separate(my_data,col = product, into = c(&quot;Info&quot;,&quot;Product&quot;), sep = &quot;:&quot;) Inspecting first 10 values: head(my_data,10) ## Info ## 1 product/productId ## 2 product/title ## 3 product/price ## 4 review/userId ## 5 review/profileName ## 6 review/helpfulness ## 7 review/score ## 8 review/time ## 9 review/summary ## 10 review/text ## Product ## 1 B00064C0IU ## 2 Oscar Eau de Toilette for Women by Oscar de La Renta ## 3 24.19 ## 4 A1FWT811DSZLC8 ## 5 Heidi M ## 6 0/0 ## 7 3.0 ## 8 1360368000 ## 9 doesn&#39;t last ## 10 very light scent that doesn&#39;t last very long. pretty bottle but I was hoping for more of a freesia scent. which it was not. The data set is loaded in .txt format, which makes it a bit challenging to work with. In the following sections we will undertake data manipulation in order to bring the data set in more suitable form. First, we will convert it from the current long-format to the wide-format, where each column will represent a product, and each row a feature: #Converting long format to wide my_data &lt;- my_data %&gt;% group_by(Info) %&gt;% mutate(Order = seq_along(Info)) %&gt;% spread(key = Order, value = Product) Since the column names are labeled with numbers, we will apply first row as a label for the corresponding column name: my_data &lt;- as.data.frame(t(my_data)) my_data&lt;-my_data%&gt;% row_to_names(row_number = 1) Delete rows with at least 1 NAs: my_data &lt;- my_data[rowSums(is.na(my_data))==0,] Trim white space at the beginning or ending the string: my_data$`review/userId`&lt;- trimws(my_data$`review/userId`) my_data$`product/productId`&lt;- trimws(my_data$`product/productId`) my_data$`product/price`&lt;- trimws(my_data$`product/price`) my_data$`product/title`&lt;- trimws(my_data$`product/title`) Filtering out reviews with unknown userID and productId: my_data&lt;-filter(my_data,`review/userId`!=&quot;unknown&quot; &amp; `product/productId`!=&quot;unknown&quot; &amp; `product/price`!=&quot;unknown&quot;) Correcting column classes: my_data$`product/productId` &lt;- as.factor(my_data$`product/productId`) my_data$`review/score`&lt;- as.numeric(my_data$`review/score`) my_data$`review/userId`&lt;-as.factor(my_data$`review/userId`) my_data$`product/price`&lt;-as.numeric(my_data$`product/price`) 5.2.3 How many times users reviewed products? In order to use relevant data, we would need to define the minimum number of reviews per user. Since majority of users left only one review. Therefore, we will remove all single-review users and all other users who left less then 2 reviews. Filtering out users who left 2 or more reviews: freq&lt;-as.data.frame(table(my_data$`review/userId`)) index&lt;-filter(freq, freq$Freq&gt;=1)$Var1 We are now left with 1316 users who reviewed certain beauty product at least 2 times. my_data &lt;- subset(my_data,`review/userId` %in% index) 5.3 Exploratory data analysis 5.3.1 Head of data head(my_data) ## product/price product/productId ## 1 24.19 B00064C0IU ## 2 24.19 B00064C0IU ## 3 24.19 B00064C0IU ## 4 24.19 B00064C0IU ## 5 5.99 B000K5JBZU ## 6 5.99 B000K5JBZU ## product/title ## 1 Oscar Eau de Toilette for Women by Oscar de La Renta ## 2 Oscar Eau de Toilette for Women by Oscar de La Renta ## 3 Oscar Eau de Toilette for Women by Oscar de La Renta ## 4 Oscar Eau de Toilette for Women by Oscar de La Renta ## 5 Optimum Care Anti-Breakage Therapy Moisture Replenish Cream Hairdress ## 6 Optimum Care Anti-Breakage Therapy Moisture Replenish Cream Hairdress ## review/helpfulness review/profileName review/score ## 1 0/0 Heidi M 3 ## 2 0/0 Donna Mpaulin &quot;PURPLE RAVEN&quot; 5 ## 3 0/0 M. Avila 1 ## 4 0/0 Kim M. Colt 5 ## 5 1/1 PloveJ 5 ## 6 0/0 LADY-I 5 ## review/summary ## 1 doesn&#39;t last ## 2 Smells divine. ## 3 Very disappointed! ## 4 Nice gift ## 5 TRULY MADE A DIFFERENCE! ## 6 Excellent Product for treatment of Breakage of ends ## review/text ## 1 very light scent that doesn&#39;t last very long. pretty bottle but I was hoping for more of a freesia scent. which it was not. ## 2 This is my second bottle of sheer freesia, I just love this fragrance, its a light delicate sent, beautiful, like a summer day. ## 3 This perfume is just AWFUL! Smells nothing like freesia.The gift recipient was not impressed. The worst is that it can&#39;t be returned! ## 4 This was a gift for my sister. It wowed her. She has always worn Freesia but typically can only find it in body lotion or such. This product really thrilled her, a nice perfume in her favorite scent with a beautiful package. ## 5 I have been using this product for a couple years now. I started using it because my hair had gotten so dry from all the chemical treatments and relaxers. This actualy came in the relaxer kit. I tried it and could not beleive the difference it made with one use. I could not find it in any of the stores at the time so I searched Amazon and they had it. I absolutely love it. It is the best moisturizing product I have used so far. My hair is soft with good elasticity and it is not breaking anywhere close to what it was. I am very happy with it. ## 6 I Tried this product in the past and fell in love with it. I could not find it for some time and am now very pleased that I was abe to find it again here on amazon. It smoothes the hair and faciltate ease in removing tangles. ## review/time review/userId ## 1 1360368000 A1FWT811DSZLC8 ## 2 1358467200 A1THE6V6O8ROD4 ## 3 1357084800 A176IQ7MVD3N6T ## 4 1326240000 A34BDX4JVMG23Y ## 5 1351987200 A3UWJXJI7S3T05 ## 6 1360972800 A1QAXWETH56D6J 5.3.2 How many unique products are reviewed? length(unique(my_data$`product/productId`)) ## [1] 928 There are 928 products which were reviewed. 5.3.3 How many reviewers do we have? length(unique(my_data$`review/userId`)) ## [1] 8002 There are 8002 unique reviewers/customers who reviewed products. 5.3.4 How many scores do we have? length(my_data$`review/score`) ## [1] 8581 There are 8581 ratings. 5.3.5 What is the distribution of ratings? hist(as.numeric(my_data$`review/score`),main = &quot;Histogramm of scores&quot;,xlab = &quot;Score&quot;) Products seem to be favorably rated as the distribution of scores showes that the best score is the most frequent. 5.3.6 What is the average number of reviews per user? my_data %&gt;% group_by(`review/userId`) %&gt;% summarise(Freq=n())%&gt;% select(Freq) %&gt;% summary() ## Freq ## Min. : 1.000 ## 1st Qu.: 1.000 ## Median : 1.000 ## Mean : 1.072 ## 3rd Qu.: 1.000 ## Max. :37.000 In the original data set It users left on average left a review only once. After filtering, we see that our average is at 3 reviews per user. 5.3.7 What is the average score per user? (grand.mean &lt;- my_data %&gt;% dplyr::summarise(Grand.mean=mean(`review/score`))) ## Grand.mean ## 1 4.196248 It seems that beauty products on Amazon are well received by users as the average score per user is quite high, at 4.1962475. 5.4 Building a model 5.4.1 Final data outlook Here is a glimpse in our data before we start building the recommnder: head(my_data) ## product/price product/productId ## 1 24.19 B00064C0IU ## 2 24.19 B00064C0IU ## 3 24.19 B00064C0IU ## 4 24.19 B00064C0IU ## 5 5.99 B000K5JBZU ## 6 5.99 B000K5JBZU ## product/title ## 1 Oscar Eau de Toilette for Women by Oscar de La Renta ## 2 Oscar Eau de Toilette for Women by Oscar de La Renta ## 3 Oscar Eau de Toilette for Women by Oscar de La Renta ## 4 Oscar Eau de Toilette for Women by Oscar de La Renta ## 5 Optimum Care Anti-Breakage Therapy Moisture Replenish Cream Hairdress ## 6 Optimum Care Anti-Breakage Therapy Moisture Replenish Cream Hairdress ## review/helpfulness review/profileName review/score ## 1 0/0 Heidi M 3 ## 2 0/0 Donna Mpaulin &quot;PURPLE RAVEN&quot; 5 ## 3 0/0 M. Avila 1 ## 4 0/0 Kim M. Colt 5 ## 5 1/1 PloveJ 5 ## 6 0/0 LADY-I 5 ## review/summary ## 1 doesn&#39;t last ## 2 Smells divine. ## 3 Very disappointed! ## 4 Nice gift ## 5 TRULY MADE A DIFFERENCE! ## 6 Excellent Product for treatment of Breakage of ends ## review/text ## 1 very light scent that doesn&#39;t last very long. pretty bottle but I was hoping for more of a freesia scent. which it was not. ## 2 This is my second bottle of sheer freesia, I just love this fragrance, its a light delicate sent, beautiful, like a summer day. ## 3 This perfume is just AWFUL! Smells nothing like freesia.The gift recipient was not impressed. The worst is that it can&#39;t be returned! ## 4 This was a gift for my sister. It wowed her. She has always worn Freesia but typically can only find it in body lotion or such. This product really thrilled her, a nice perfume in her favorite scent with a beautiful package. ## 5 I have been using this product for a couple years now. I started using it because my hair had gotten so dry from all the chemical treatments and relaxers. This actualy came in the relaxer kit. I tried it and could not beleive the difference it made with one use. I could not find it in any of the stores at the time so I searched Amazon and they had it. I absolutely love it. It is the best moisturizing product I have used so far. My hair is soft with good elasticity and it is not breaking anywhere close to what it was. I am very happy with it. ## 6 I Tried this product in the past and fell in love with it. I could not find it for some time and am now very pleased that I was abe to find it again here on amazon. It smoothes the hair and faciltate ease in removing tangles. ## review/time review/userId ## 1 1360368000 A1FWT811DSZLC8 ## 2 1358467200 A1THE6V6O8ROD4 ## 3 1357084800 A176IQ7MVD3N6T ## 4 1326240000 A34BDX4JVMG23Y ## 5 1351987200 A3UWJXJI7S3T05 ## 6 1360972800 A1QAXWETH56D6J 5.4.2 Subsetting data In order to model a recommender system, three variables in our case are of great importance: User ID Product ID Score / Rating Our model will be based on these three variables. Additionally, we will make use of the remaining features by utilizing some text mining techniques, but you will find more details at some later point. Now, we will make a subset of our data with 3 mentioned variables: subset_my_data &lt;- subset(my_data, select = c(`review/userId`,`product/productId`,`review/score`)) head(subset_my_data) ## review/userId product/productId review/score ## 1 A1FWT811DSZLC8 B00064C0IU 3 ## 2 A1THE6V6O8ROD4 B00064C0IU 5 ## 3 A176IQ7MVD3N6T B00064C0IU 1 ## 4 A34BDX4JVMG23Y B00064C0IU 5 ## 5 A3UWJXJI7S3T05 B000K5JBZU 5 ## 6 A1QAXWETH56D6J B000K5JBZU 5 Let us inspect the dimensions: dim(subset_my_data) ## [1] 8581 3 5.4.3 Formatting data Our data is currently in the long format, i.e. one row for one rating. However, we would want to get a matrix with ratings where the rows represent the users IDs and the columns the Product IDs. Thus, we will transform our data to so called rating matrix: ratings &lt;- as(subset_my_data, &quot;realRatingMatrix&quot;) In order to avoid high/low rating bias from users who give high (or low) ratings to all the products they reviewed, we will need to normalize our data. That would prevent certain bias in the results. ratings &lt;- normalize(ratings) 5.4.4 Inspecting real rating matrix We can plot an image of the rating matrix for the first 250 users and 250 products: image(ratings[1:250,1:250]) From the visualisation we can see that rating matrix is very sparse, i.e. that not every user did rate/review every product in our data set. We can inspect the data for the first 10 users and the first 4 products: ratings[1:10, 1:4]@data ## 10 x 4 sparse Matrix of class &quot;dgCMatrix&quot; ## B000052Z5B B000052Z5L B000052Z5M B000052Z89 ## A00275441WYR3489IKNAB . . . . ## A0353671240B3B6L8WKZB . . . . ## A0793784FP3F6ZXZDTN6 . . . . ## A10013UITIMJVI . . . . ## A1008GFLTBL76H . . . . ## A100VLYGYI6FXY . . . . ## A100W0JWG5GB6G . . . . ## A1016Z89IM29SK . . . . ## A102NKLXRT5KEM . . . . ## A102U9TVYZC0DX . . . . As we already saw in the visualisation, the data is sparse and the first 10 users did not review first 4 products visualised in the matrix above. 5.4.5 Building a recommender Finally, we will now build our recommendation system based on User-based collaborative filtering User-based collaborative filtering search for similar users and gives them recommendations based on what other users with similar rating patterns appreciated: recommender &lt;- Recommender(ratings, method=&quot;UBCF&quot;) recommender ## Recommender of type &#39;UBCF&#39; for &#39;realRatingMatrix&#39; ## learned using 8002 users. Additionally, in order to compare results of two methods, we would like to apply item-based collaborative filtering method to build another recommender system. In contrast to user-based collaborative filtering, item-based collaborative filtering looks for similarity patterns between items and recommends them to users based on the computed information. recommenderIBCF &lt;- Recommender(ratings, method=&quot;IBCF&quot;) recommenderIBCF ## Recommender of type &#39;IBCF&#39; for &#39;realRatingMatrix&#39; ## learned using 8002 users. As reported, both recommendation systems are built using 8002 users. 5.5 Interpretation and managerial implications Now we would like to interpret the output of our recommender systems. First we start with UBCF-based recommender system. current.user &lt;- 45 recommendations &lt;- predict(recommender, current.user, data = ratings, n = 5) We decided to take user number 45 and inspect 5 recommendations provided to him/her. Now we can inspect what our recommendation system provided in the end: str(recommendations) ## Formal class &#39;topNList&#39; [package &quot;recommenderlab&quot;] with 4 slots ## ..@ items :List of 1 ## .. ..$ A10N19OL0CKYDV: int [1:2] 173 772 ## ..@ ratings :List of 1 ## .. ..$ A10N19OL0CKYDV: num [1:2] 5 5 ## ..@ itemLabels: chr [1:928] &quot;B000052Z5B&quot; &quot;B000052Z5L&quot; &quot;B000052Z5M&quot; &quot;B000052Z89&quot; ... ## ..@ n : int 5 We can see that the user ID of the user number 45 is A10N19OL0CKYDV. Our system found 2 products to recommend to this user, and we can find product index (173, 772) as well as ratings that the system calculated from the ratings of the closest users (5,5). Let us create a prediction made by IBCF-based recommender: recommendationsIBCF &lt;- predict(recommenderIBCF,current.user,data = ratings, n=5) str(recommendationsIBCF) ## Formal class &#39;topNList&#39; [package &quot;recommenderlab&quot;] with 4 slots ## ..@ items :List of 1 ## .. ..$ A10N19OL0CKYDV: int(0) ## ..@ ratings :List of 1 ## .. ..$ A10N19OL0CKYDV: num(0) ## ..@ itemLabels: chr [1:928] &quot;B000052Z5B&quot; &quot;B000052Z5L&quot; &quot;B000052Z5M&quot; &quot;B000052Z89&quot; ... ## ..@ n : int 5 We will inspect potential recommended products: head(as(recommendationsIBCF,&quot;list&quot;)) ## $A10N19OL0CKYDV ## character(0) Unfortunately, our item-based collaborative filtering system did not generate any recommendation for the user number 45. 5.5.1 Identification of the recommended products Let us now identify the products recommended by UBCF-based recommender. First we need to extract the index of the recommended products: index&lt;- as.vector(as.factor(unlist(as(recommendations, &quot;list&quot;)))) Then we find corresponding product in our initial data set: (recommendation_26&lt;-my_data[match(index, my_data$`product/productId`),]) ## product/price product/productId ## 6952 4.97 B00027EG9C ## 4190 0.01 B000NCQK68 ## product/title review/helpfulness ## 6952 Neutrogena Fresh Foaming Cleanser, 6.7 Ounce 0/0 ## 4190 Revlon ColorSilk Beautiful Color Hair Coloring Products 10/11 ## review/profileName review/score review/summary ## 6952 armicat 4 I love it! ## 4190 Grace M. 4 Pretty good ## review/text ## 6952 Neutrogena Fresh Foaming Cleanser is really good! I am using everyday, I can recommend this item to my friends. But the problem is packaging was bad. ## 4190 I&#39;ve had black/blue-black hair for a while now, and have become somewhat of an expert in the field of cheap-o boxed drugstore hair color. I keep coming back to this color! I was suspicious at first to be honest because its SO cheap, I figured my hair would fall out or turn an ugly color... but I tried it anyway. I have long, super thick hair but there was enough dye to get everything - no streaks. It lasts the longest out of any boxed hair color I&#39;ve tried and it looks SO good!OK, yeah, it comes with cheap crappy gloves and the world&#39;s smallest packet of conditioner, but those are minor issues. You can get 50 pairs of latex gloves at rite-aid for 2 bucks (a good idea anyway so you dont have to keep reusing the dirty color-stained gloves from the box) and if you don&#39;t already have conditioner to supplement the conditioner in the box, you shouldn&#39;t be dying your hair anyway.The only drawback I&#39;ve experienced is the color DOES run when I wash it and I have definitely stained my bath towels/pillowcase a few times. It could be something I&#39;m doing wrong though... ## review/time review/userId ## 6952 1361232000 A3HUAIQVMNXGKL ## 4190 1308700800 A1DBAOA82KSVND Two products recommended are : Neutrogena Fresh Foaming Cleanser, 6.7 Ounce - facial cleansing cream Revlon ColorSilk Beautiful Color Hair Coloring Products - color for hair Let us now inspect products that the user A10N19OL0CKYDV rated: my_data[match(&quot;A10N19OL0CKYDV&quot;,my_data$`review/userId`),] ## product/price product/productId product/title review/helpfulness ## 1913 1.89 B000NGLR62 Opi Ridge Filler .5 oz. 0/0 ## review/profileName review/score review/summary ## 1913 Erica 4 Great Base Coat ## review/text ## 1913 I got this as a base coat, and for that purpose it works really well. It&#39;s easy to apply (the brush is easy to use) and dries to a matte, translucent white coat. Nail polish glides smoothly over it, just as I was expecting. It protects my nails from dark polishes and prevents my nails from chipping easily. I&#39;m unsure of how different it is than other regular base coats, but I really like and recommend this product. ## review/time review/userId ## 1913 1356912000 A10N19OL0CKYDV 5.5.2 Implications As we could see, this user reviewed only one product, called Opi Ridge Filler .5 oz., and it is a nail-care product. We could assume that this person is a female user since the product she bought is typically associated with female beauty care. What is more, two recommended products are as well very strongly associated to being typical female beauty products. Finally, we have the name of the user (Erica), so we can be sure that the user is a female. From the qualitative perspective it seems that our recommendation system provides descent recommendations!. 5.6 Bonus analysis: Text Mining In addition to our recommender system, we will apply some basic text mining techniques to explore reviews text. Text mining helps us to mine opinions of users (in this case) about the reviewed products at scale. 5.6.1 Wordcloud Here we create a wordcloud of words from product reviews of recommended products to the user 45. Beforehand we would need to pre-process the text of reviews in the following manner: # Split text into parts using new line character: text.docs &lt;- Corpus(VectorSource(recommendation_26$`review/text`)) toSpace &lt;- content_transformer(function (x , pattern ) gsub(pattern, &quot; &quot;, x)) text.docs &lt;- tm_map(text.docs, toSpace, &quot;/&quot;) text.docs &lt;- tm_map(text.docs, toSpace, &quot;@&quot;) text.docs &lt;- tm_map(text.docs, toSpace, &quot;\\\\|&quot;) text.docs &lt;- tm_map(text.docs, content_transformer(tolower)) text.docs &lt;- tm_map(text.docs, removeNumbers) text.docs &lt;- tm_map(text.docs, stripWhitespace) text.docs &lt;- tm_map(text.docs, removeWords, stopwords(&quot;english&quot;)) text.docs &lt;- tm_map(text.docs, removePunctuation) dtm &lt;- DocumentTermMatrix(text.docs, control=list(weighting=weightTf)) m &lt;- as.matrix(t(dtm)) v &lt;- sort(rowSums(m),decreasing=TRUE) d &lt;- data.frame(word = names(v),freq=v) set.seed(1234) wordcloud(words = d$word, freq = d$freq, min.freq = 10, max.words=200, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, &quot;Dark2&quot;)) From the wordcloud we can see that words color, hair and gloves are quite frequent in the text corpus analyzed. That could be a hint that the user was referring to the usage of the product. The term cheap could be easily spotted as well. This word is not very likable among marketers as it brings unfavorable image to the brand. Nevertheless, it seems that the user believes that the product is affordable. 5.7 Future work This data set provides multiple possibility for the further analysis besides recommender systems. Here are some ideas what can be further done: Sentiment analysis - Sentiment analysis can be done and scores (typically from -3 to +3) accompanied to each review description. That would tell us more about the sentiment that users have about the products reviewed. Prediction of ratings - In case that we would have enough data (ratings) about one product, regardless of customers, it would be possible to develop a machine learning model which based on current features (e.g. price) and additional features (such as sentiment or words in the review) could predict the rating that one product might have. Prediction of the sentiment - in the similar manner as the previous point, it would be useful to train a machine learning model to predict a sentiment that would hypotetically emerge in a reviewer. Topic modeling - topic modeling is unsupervised machine learning technique that could help us identify topics which users discuss in the text of reviews. 5.8 Limitations Limitation related to this data set and building a recommender system is the fact that the majority of users have left only one review: table(as.data.frame(table(my_data$`review/userId`))$Freq) ## ## 1 2 3 4 5 6 9 10 37 ## 7638 259 58 30 9 5 1 1 1 Let us take a look which users left the most reviews: limitations &lt;-as.data.frame(table(my_data$`review/userId`)) limitations %&gt;% arrange(desc(Freq))%&gt;%rename(UserID=Var1)%&gt;% head() ## UserID Freq ## 1 A3M174IC0VXOS2 37 ## 2 A3KEZLJ59C1JVH 10 ## 3 A3QEE0ZPMT3W6P 9 ## 4 A281NPSIMI1C2R 6 ## 5 A2D4GHWUW440K3 6 ## 6 A2FJZE9Y420X77 6 We can see that users under IDs A3M174IC0VXOS2,A3KEZLJ59C1JVH,A3QEE0ZPMT3W6P are rare examples of users who left multiple product reviews. "]]
